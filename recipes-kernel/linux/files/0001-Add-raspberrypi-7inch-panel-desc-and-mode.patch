From 9dbc686dad9eb1b0ee891338bbd548b472590db1 Mon Sep 17 00:00:00 2001
From: airjason13 <airjason13@gmail.com>
Date: Thu, 14 Aug 2025 16:42:35 +0800
Subject: [PATCH] Add raspberrypi 7inch panel desc and mode

Signed-off-by: airjason13 <airjason13@gmail.com>
---
 drivers/gpu/drm/panel/panel-simple.c | 65 ++++++++++++++++++++++++----
 1 file changed, 57 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-simple.c b/drivers/gpu/drm/panel/panel-simple.c
index b816ea06ff1b..dc43aa288319 100644
--- a/drivers/gpu/drm/panel/panel-simple.c
+++ b/drivers/gpu/drm/panel/panel-simple.c
@@ -557,7 +557,7 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 	int connector_type;
 	u32 bus_flags;
 	int err;
-
+	printk("Venom panel simple probe A1\n");
 	panel = devm_kzalloc(dev, sizeof(*panel), GFP_KERNEL);
 	if (!panel)
 		return -ENOMEM;
@@ -569,17 +569,20 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 	if (IS_ERR(panel->supply))
 		return PTR_ERR(panel->supply);
 
+	printk("Venom panel simple probe got power pin desc\n");
 	panel->enable_gpio = devm_gpiod_get_optional(dev, "enable",
 						     GPIOD_OUT_LOW);
 	if (IS_ERR(panel->enable_gpio))
 		return dev_err_probe(dev, PTR_ERR(panel->enable_gpio),
 				     "failed to request GPIO\n");
+	printk("Venom panel simple probe got enable pin desc\n");
 
 	err = of_drm_get_panel_orientation(dev->of_node, &panel->orientation);
 	if (err) {
 		dev_err(dev, "%pOF: failed to get orientation %d\n", dev->of_node, err);
 		return err;
 	}
+	printk("Venom panel simple probe got power pin desc\n");
 
 	ddc = of_parse_phandle(dev->of_node, "ddc-i2c-bus", 0);
 	if (ddc) {
@@ -589,6 +592,7 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 		if (!panel->ddc)
 			return -EPROBE_DEFER;
 	}
+	printk("Venom panel simple probe check ddc ok\n");
 
 	if (desc == &panel_dpi) {
 		/* Handle the generic panel-dpi binding */
@@ -602,6 +606,7 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 	}
 
 	connector_type = desc->connector_type;
+	printk("Venom panel simple probe check connector_type : %d\n", connector_type);
 	/* Catch common mistakes for panels. */
 	switch (connector_type) {
 	case 0:
@@ -628,6 +633,7 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 		err = -EINVAL;
 		goto free_ddc;
 	case DRM_MODE_CONNECTOR_DSI:
+		printk("Venom panel simple probe DSI connector, bpc : %d\n", desc->bpc);
 		if (desc->bpc != 6 && desc->bpc != 8)
 			dev_warn(dev, "Expected bpc in {6,8} but got: %u\n", desc->bpc);
 		break;
@@ -676,6 +682,8 @@ static int panel_simple_probe(struct device *dev, const struct panel_desc *desc)
 	}
 
 	drm_panel_add(&panel->base);
+	
+	printk("Venom panel simple probe ok!\n");
 
 	return 0;
 
@@ -1428,6 +1436,7 @@ static const struct panel_desc cdtech_s070wv95_ct16 = {
 	},
 };
 
+
 static const struct display_timing chefree_ch101olhlwh_002_timing = {
 	.pixelclock = { 68900000, 71100000, 73400000 },
 	.hactive = { 1280, 1280, 1280 },
@@ -4182,6 +4191,33 @@ static const struct panel_desc arm_rtsm = {
 	.bus_format = MEDIA_BUS_FMT_RGB888_1X24,
 };
 
+
+static const struct drm_display_mode raspberrypi_7inch_mode = {
+        .clock = 30000,
+        .hdisplay = 800,
+        .hsync_start = 800 + 131,
+        .hsync_end = 800 + 131 + 2,
+        .htotal = 800 + 131 + 2 + 45,
+        .vdisplay = 480,
+        .vsync_start = 480 + 7,
+        .vsync_end = 480 + 7 + 2,
+        .vtotal = 480 + 7 + 2 + 22,
+        .flags = DRM_MODE_FLAG_NVSYNC | DRM_MODE_FLAG_NHSYNC,
+};
+
+static const struct panel_desc raspberrypi_7inch = {
+        .modes = &raspberrypi_7inch_mode,
+        .num_modes = 1,
+        .bpc = 8,
+        .size = {
+                .width = 154,
+                .height = 86,
+        },
+        .bus_format = MEDIA_BUS_FMT_RGB888_1X24,
+        .connector_type = DRM_MODE_CONNECTOR_DSI,
+};
+
+
 static const struct of_device_id platform_of_match[] = {
 	{
 		.compatible = "ampire,am-1280800n3tzqw-t00h",
@@ -4201,6 +4237,9 @@ static const struct of_device_id platform_of_match[] = {
 	}, {
 		.compatible = "arm,rtsm-display",
 		.data = &arm_rtsm,
+	}, {
+		.compatible = "raspberrypi,7inch-dsi",
+		.data = &raspberrypi_7inch,
 	}, {
 		.compatible = "armadeus,st0700-adapt",
 		.data = &armadeus_st0700_adapt,
@@ -4610,11 +4649,13 @@ MODULE_DEVICE_TABLE(of, platform_of_match);
 static int panel_simple_platform_probe(struct platform_device *pdev)
 {
 	const struct panel_desc *desc;
-
+	printk("Venom panel_simple_platform_probe!\n");
 	desc = of_device_get_match_data(&pdev->dev);
-	if (!desc)
+	if (!desc){
+		printk("Venom panel_simple_platform NG!\n");
 		return -ENODEV;
-
+	}
+	printk("Venom panel_simple_platform_probe ok!\n");
 	return panel_simple_probe(&pdev->dev, desc);
 }
 
@@ -4824,6 +4865,9 @@ static const struct panel_desc_dsi lg_acx467akm_7 = {
 	.lanes = 4,
 };
 
+
+
+
 static const struct drm_display_mode osd101t2045_53ts_mode = {
 	.clock = 154500,
 	.hdisplay = 1920,
@@ -4887,7 +4931,7 @@ static int panel_simple_dsi_probe(struct mipi_dsi_device *dsi)
 {
 	const struct panel_desc_dsi *desc;
 	int err;
-
+	printk("panel_simple_dsi_probe!\n");
 	desc = of_device_get_match_data(&dsi->dev);
 	if (!desc)
 		return -ENODEV;
@@ -4899,14 +4943,14 @@ static int panel_simple_dsi_probe(struct mipi_dsi_device *dsi)
 	dsi->mode_flags = desc->flags;
 	dsi->format = desc->format;
 	dsi->lanes = desc->lanes;
-
+	
 	err = mipi_dsi_attach(dsi);
 	if (err) {
 		struct panel_simple *panel = mipi_dsi_get_drvdata(dsi);
 
 		drm_panel_remove(&panel->base);
 	}
-
+	printk("panel_simple_dsi_probe end!bpc : %d\n", desc->desc.bpc);
 	return err;
 }
 
@@ -4940,16 +4984,20 @@ static struct mipi_dsi_driver panel_simple_dsi_driver = {
 static int __init panel_simple_init(void)
 {
 	int err;
-
+	printk("panel_simple_init A1\n");
 	err = platform_driver_register(&panel_simple_platform_driver);
 	if (err < 0)
 		return err;
 
+	printk("panel_simple_init A2 err : %d\n", err);
 	if (IS_ENABLED(CONFIG_DRM_MIPI_DSI)) {
+		printk("CONFIG_DRM_MIPI_DSI\n");
 		err = mipi_dsi_driver_register(&panel_simple_dsi_driver);
+		printk("mipi dis driver register err : %d\n", err);
 		if (err < 0)
 			goto err_did_platform_register;
 	}
+	printk("panel_simple_init A3 err : %d\n", err);
 
 	return 0;
 
@@ -4962,6 +5010,7 @@ module_init(panel_simple_init);
 
 static void __exit panel_simple_exit(void)
 {
+	printk("Venom panel simple exit!\n");
 	if (IS_ENABLED(CONFIG_DRM_MIPI_DSI))
 		mipi_dsi_driver_unregister(&panel_simple_dsi_driver);
 
-- 
2.34.1

